{
  "hook_init_js": "alert1.init = function () {\n  this.enable_hooked_functions(this.hooked_functions);\n};\n",
  "hook_js": "alert1.hook = function (msg) {\n  window.postMessage({\n    nonce: this.nonce, title: document.title, func: this.target_scope_str+'.'+this.target_str, stack_trace: this.get_stack_trace(), org_msg: msg\n  }, \"*\");\n};\n",
  "hooked_functions_json":"[{\"target\":\"alert\",\"target_scope\":\"window\",\"hook\":\"hook\",\"hook_scope\":\"this\",\"hook_wrapper\":\"hook_wrapper\"}]",
  "obj_js":"var alert1 = {\nenable_hooked_functions: function (hooked_functions) {\n  hooked_functions.map(this.enable_hooked_function, this);\n},\nenable_hooked_function: function (hooked_function) {\n  //set nonce\n  hooked_function.nonce = this.nonce;\n\n  //save string so we can reference target again\n  hooked_function.target_str = hooked_function.target\n  hooked_function.target_scope_str = hooked_function.target_scope;\n\n  //eval to get scope\n  hooked_function = this.eval_hooked_function_scope(hooked_function);\n\n\n  //bind scopes of functions, functions are strings so we need to access like a map\n  hooked_function.target = (hooked_function.target_scope)[hooked_function.target].bind(hooked_function.target_scope);\n  hooked_function.hook = (hooked_function.hook_scope)[hooked_function.hook].bind(hooked_function);\n  hooked_function.hook_wrapper = (this)[hooked_function.hook_wrapper].bind(hooked_function);\n  //add stack trace function\n  hooked_function.get_stack_trace = this.get_stack_trace;\n\n  //actually hook the function\n  (hooked_function.target_scope)[hooked_function.target_str] = hooked_function.hook_wrapper.bind(hooked_function);\n},\neval_hooked_function_scope: function (hooked_function) {\n  eval('hooked_function.target_scope = ' + hooked_function.target_scope);\n  eval('hooked_function.hook_scope = ' + hooked_function.hook_scope);\n\n  return hooked_function;\n},\nhook_wrapper: function (input) {\n  var whitelist_pass = true;\n  var blacklist_pass = true;\n\n  //check whitelist\n  if (this.whitelist) {\n    if (-1 == this.whitelist.indexOf(input)) {\n      //console.log('whitelist fail');\n      whitelist_pass = false;\n    }\n  }\n  //check blacklist\n  if (this.blacklist) {\n    if (-1 != this.blacklist.indexOf(input)) {\n      //console.log('blacklist fail');\n      blacklist_pass = false;\n    }\n  }\n\n  //only hook if we passed whitelist and blacklist\n  if (whitelist_pass && blacklist_pass) {\n    //console.log('calling hook function');\n    return this.hook(input);\n  }\n  //we don't want to hook this input if we failed white/blacklist\n  else {\n    //console.log('calling original function');\n    return this.target(input);\n  }\n},\nget_stack_trace: function () {\n  return (new Error('stack trace: '+Math.random().toString())).stack;\n},\n};\n",
  "obj_name":"alert1",
  "scope_whitelist":"[\".\"]"
}
